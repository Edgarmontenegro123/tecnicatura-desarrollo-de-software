/*
======================================
 Ejercicios Pr√°cticos de POO
======================================
/*
1Ô∏è‚É£ Ejercicio: Crear un Reloj Digital
--------------------------------------
üìå Objetivo: Practicar el trabajo con objetos y m√©todos.
üîπ Tarea: Crear una clase `Reloj` con:
   - Propiedades `horas`, `minutos` y `segundos`.
   - Un m√©todo `avanzar()` que incrementa el tiempo en un segundo y actualiza minutos/horas si es necesario.
   - Un m√©todo `mostrarTiempo()` que imprime la hora en formato HH:MM:SS.
*/
class Reloj {
    constructor(horas, minutos, segundos) {
        this.horas = horas;
        this.minutos = minutos;
        this.segundos = segundos;
    }
    // Dentro de la clase creo los m√©todos o funciones
    avanzar() {
        this.segundos += 1;

        if (this.segundos === 60) {
            this.segundos = 0;
            this.minutos += 1;
        }

        if (this.minutos === 60) {
            this.minutos = 0;
            this.horas += 1;
        }

        if (this.horas === 24) {
            this.horas = 0;
        }
    }

    mostrarTiempo() {
        const hh = this.horas < 10 ? `0${this.horas}` : this.horas;
        const mm = this.minutos < 10 ? `0${ this.minutos}` : this.minutos;
        const ss = this.segundos < 10 ? `0${this.segundos}` : this.segundos;

        /*
        const hh = String(this.horas).padStart(2, '0');
        const mm = String(this.minutos).padStart(2, '0');
        const ss = String(this.segundos).padStart(2, '0');
        */

        return `${hh}:${mm}:${ss}`;
    }

    // Funci√≥n para que el reloj tenga un comportamiento normal
    iniciar() {
        setInterval(() => {
            this.avanzar();
            console.log(this.mostrarTiempo());
        }, 1000);
    }
}

const newReloj = new Reloj(14,59,58);
/*console.log(newReloj.mostrarTiempo());
newReloj.avanzar();
console.log(newReloj.mostrarTiempo());
newReloj.avanzar();
console.log(newReloj.mostrarTiempo());
newReloj.avanzar();
console.log(newReloj.mostrarTiempo());*/
// newReloj.iniciar();

/*
2Ô∏è‚É£ Ejercicio: Sistema de Pel√≠culas
--------------------------------------
üìå Objetivo: Aprender encapsulamiento protegiendo propiedades privadas.
üîπ Tarea: Crear una clase `Pel√≠cula` con:
   - `t√≠tulo`, `director`, `calificaci√≥n` (1-10).
   - Una propiedad privada `_calificaci√≥n` y un m√©todo `setCalificacion(valor)`.
   - Un m√©todo `getInfo()` que muestra los detalles de la pel√≠cula.
*/

class Pelicula {
    #calificacion = null;

    constructor(titulo, director, calificacion){
        this.titulo = titulo;
        this.director = director;
        this.#calificacion = null;

        if(calificacion !== undefined){
            try {
                this.setCalificacion(calificacion);
            } catch(error){
                console.warn(`Valor inicial inv√°lido: ${error.message}`);
            }
        }
    }

    setCalificacion(valor){
        if(valor > 0 && valor <= 10){
            this.#calificacion = valor;
        }
        else {
            throw new Error(`El valor ${valor} no es un valor v√°lido para calificar`);
        }
    }

    getInfo(){
        let response
        if(this.#calificacion === null){
            response = `La pel√≠cula ${this.titulo}, del director ${this.director}, aun no tiene una calificaci√≥n v√°lida.`;
        }
        else {
            response = `La pel√≠cula ${this.titulo}, del director ${this.director}, tiene una calificaci√≥n de ${this.#calificacion}/10 puntos.`;
        }
        return response;
    }
}

const pelicula1 = new Pelicula('Batman Begins', 'Christopher Nolan');
pelicula1.setCalificacion(7);
// console.log(pelicula1.getInfo());

// let pelicula2 = new Pelicula('Batman Dark Knight', 'Christopher Nolan', 11);
// console.log(pelicula2.getInfo());

pelicula2 = new Pelicula('Batman Dark Knight', 'Christopher Nolan', 10);
// console.log(pelicula2.getInfo());

const pelicula3 = new Pelicula('Batman Dark Knight Rises', 'Christopher Nolan', 8);
// console.log(pelicula3.getInfo());


/*
3Ô∏è‚É£ Ejercicio: Sistema de Comercio Electr√≥nico
--------------------------------------
üìå Objetivo: Aprender herencia creando una jerarqu√≠a de productos.
üîπ Tarea: Crear una clase padre `Producto`.
   - Subclases: `Electr√≥nica`, `Ropa` y `Alimentos`.
   - Cada subclase tiene un atributo √∫nico (`garant√≠a`, `talla` o `fechaCaducidad`).
*/

class Producto {
    constructor(nombre, precio, marca) {
        this.nombre = nombre;
        this.precio = precio;
        this.marca = marca;
    }

    mostrarInfo(){
        return `Nombre: ${this.nombre}, Precio: ${this.precio}, Marca: ${this.marca}`;
    }
}

// Subclases
class Electronica extends Producto {
    constructor(nombre, precio, marca, garantia) {
        super(nombre, precio, marca);
        this.garantia = garantia;
    }
    mostrarInfo() {
        return `${super.mostrarInfo()} - Garant√≠a: ${this.garantia} a√±os.`;
    }
}

class Ropa extends Producto {
    constructor(nombre, precio, marca, talla) {
        super(nombre, precio, marca);
        this.talla = talla;
    }
    mostrarInfo() {
        return `${super.mostrarInfo()} - Talla: ${this.talla}.`;
    }
}

class Alimento extends Producto {
    constructor(nombre, precio, marca, vencimiento) {
        super(nombre, precio, marca);
        this.vencimiento = vencimiento;
    }
    mostrarInfo() {
        return `${super.mostrarInfo()} - Vencimiento: ${this.vencimiento}.`;
    }
}

const producto1 = new Electronica('Televisor', 500, 'LG', 2);
const producto2 = new Ropa('Sweater', 80, 'Jordan', 'S');
const producto3 = new Alimento('Arroz', 3, 'Molinos Ala', '07/10/2025');

// console.log(producto1.mostrarInfo());
// console.log(producto2.mostrarInfo());
// console.log(producto3.mostrarInfo());

/*
4Ô∏è‚É£ Ejercicio: Sistema de Gesti√≥n de Zool√≥gico
--------------------------------------
üìå Objetivo: Aprender polimorfismo sobrescribiendo m√©todos.
üîπ Tarea: Crear una clase base `Animal`.
   - Subclases: `Le√≥n`, `Elefante`, `Mono`.
   - Cada subclase sobrescribe el m√©todo `hacerSonido()`.
*/

class Animal {
    constructor(nombre, zona) {
        this.nombre = nombre;
        this.zona = zona;
    }

    hacerSonido() {
        return `${this.nombre} hace un sonido gen√©rico!`;
    }

    mostrarInfo(){
        return `${this.hacerSonido()}.`;
    }
}

class Leon extends Animal {
    hacerSonido() {
        return `El le√≥n ${this.nombre} que viene de ${this.zona} ruge!`;
    }
}

class Elefante extends Animal {
    hacerSonido() {
        return `La elefante ${this.nombre} que viene de ${this.zona} barrita!`;
    }
}

class Mono extends Animal {
    hacerSonido() {
        return `El mono ${this.nombre} que viene de ${this.zona} parlotea!`;
    }
}

const animal1 = new Leon('Alex', 'Madagascar');
const animal2 = new Elefante('Dora', 'China');
const animal3 = new Mono('Julien', 'Colombia');

// console.log(animal1.mostrarInfo());
// console.log(animal2.mostrarInfo());
// console.log(animal3.mostrarInfo());

/*
5Ô∏è‚É£ Ejercicio: Sistema de Calificaci√≥n de Estudiantes
--------------------------------------
üìå Objetivo: Combinar todo: objetos, m√©todos, herencia y encapsulamiento.
üîπ Tarea: Crear una clase `Estudiante` con:
   - `nombre`, `calificaciones` (array), y m√©todos:
   - `agregarCalificacion(nota)`: A√±ade una nota a la lista.
   - `obtenerPromedio()`: Calcula el promedio.
   - `mostrarInfo()`: Muestra los detalles del estudiante y el promedio de notas.
*/

class Estudiante {
    #calificaciones;
    constructor(nombre, calificaciones = []) {
        this.nombre = nombre;
        if(!Array.isArray(calificaciones)){
            throw new Error(`Las calificaciones deber√≠an ser un array`);
        }
        this.#calificaciones = calificaciones;
    }

    agregarCalificacion(nota) {
        if(/*typeof nota === 'number' && */nota > 0 && nota <= 10){
            this.#calificaciones.push(nota);
        }
        else {
            throw new Error(`El valor ${nota} no es un valor v√°lido para calificar`);
        }
    }

    obtenerPromedio() {
        if(this.#calificaciones.length === 0) return 0;
        let suma = 0;
        for(let nota of this.#calificaciones) {
            suma += nota;
        }
        return (suma / this.#calificaciones.length).toFixed(2);
    }

    mostrarInfo() {
        return `Nombre: ${this.nombre}, Calificaciones: ${this.#calificaciones.join(', ')}, Promedio: ${this.obtenerPromedio()}`;
    }
}

const estudiante1 = new Estudiante('Viviana', [7, 9, 10]);
estudiante1.agregarCalificacion(9);
// console.log(estudiante1.mostrarInfo());

const estudiante2 = new Estudiante('Miranda', [2, 9, 10, 1, 4, 5]);
estudiante2.agregarCalificacion(9);
// console.log(estudiante2.mostrarInfo());

/*
6Ô∏è‚É£ Ejercicio: Sistema de Biblioteca
--------------------------------------
üìå Objetivo: Gestionar una colecci√≥n de libros usando principios de POO.
üîπ Tarea: Crear una clase `Libro` con:
   - `t√≠tulo`, `autor`, `a√±o`.
   - Una clase `Biblioteca` que almacena libros en un array.
   - M√©todos para `agregarLibro()` y `listarLibros()`.
*/

class Libro {
    constructor(titulo, autor, anio) {
        if(!titulo || !autor || !anio){
            throw new Error('Todos los campos son obligatorios.')
        }
        this.titulo = titulo;
        this.autor = autor;
        this.anio = anio;
    }
}

class Biblioteca {
    #libros;
    constructor(libros = []) {
        this.#libros = libros;
    }

    agregarLibro(libro) {
        if(libro instanceof Libro) {
            this.#libros.push(libro);
        }
        else {
            throw new Error('Solo se pueden agregar libros con los datos completos!')
        }
    }

    listarLibros() {
        if(this.#libros.length === 0) {
            return `La biblioteca est√° vac√≠a.`;
        }

        const lista = this.#libros.map(libro => {
            return `T√≠tulo: ${libro.titulo}, Autor: ${libro.autor}, A√±o: ${libro.anio}`;
        })
        return `Libros:\n${lista.join('\n')}`;
    }
}

const libro1 = new Libro('Harry Potter y la piedra filosofal', 'J. K. Rowling', '1995');
const biblioteca = new Biblioteca();
biblioteca.agregarLibro(libro1);
console.log(biblioteca.listarLibros());

const libro2 = new Libro('Harry Potter y la c√°mara secreta', 'J. K. Rowling', '1998');
biblioteca.agregarLibro(libro2);
console.log(biblioteca.listarLibros());

// Ejemplo de error
/*const libro3 = new Libro('', 'qwerty', 1985);
biblioteca.agregarLibro(libro3);
console.log(biblioteca.listarLibros());*/


/*
7Ô∏è‚É£ Ejercicio: Sistema Bancario
--------------------------------------
üìå Objetivo: Simular un sistema bancario simple.
üîπ Tarea: Crear una clase `CuentaBancaria` con:
   - `numeroCuenta`, `nombreTitular`, `saldo`.
   - M√©todos para `depositar()`, `retirar()` y `obtenerSaldo()`.
*/

/*
8Ô∏è‚É£ Ejercicio: Gesti√≥n de Veh√≠culos
--------------------------------------
üìå Objetivo: Practicar herencia con diferentes tipos de veh√≠culos.
üîπ Tarea: Crear una clase base `Veh√≠culo`.
   - Subclases: `Autom√≥vil`, `Motocicleta`, `Cami√≥n`, `Bicicleta`.
   - Cada subclase tiene un atributo √∫nico (`numRuedas`, `capacidadMotor`, etc.).
*/

/*
9Ô∏è‚É£ Ejercicio: Sistema de Chatbot
--------------------------------------
üìå Objetivo: Implementar un chatbot simple usando POO.
üîπ Tarea: Crear una clase base `Chatbot`.
   - Subclases: `BotDeSoporte`, `BotDelClima`, `BotDeProgramaci√≥n`.
   - Cada subclase responde de manera diferente seg√∫n la entrada del usuario.
*/

/*
üîü Ejercicio: Sistema de Cuestionario en L√≠nea
--------------------------------------
üìå Objetivo: Crear un sistema de cuestionario interactivo.
üîπ Tarea: Crear una clase `Cuestionario` con:
   - Una lista de objetos `Pregunta`.
   - Un m√©todo para `iniciarCuestionario()` y evaluar las respuestas del usuario.
   - Un m√©todo para mostrar la puntuaci√≥n final.
*/

/*
1Ô∏è‚É£1Ô∏è‚É£ Ejercicio: Agenda de Contactos
--------------------------------------
üìå Objetivo: Crear una aplicaci√≥n para gestionar contactos personales.
üîπ Tarea: Crear una clase `Contacto` con:
   - `nombre`, `tel√©fono`, `email`, `direcci√≥n`.
   - Una clase `Agenda` que almacena y organiza contactos.
   - M√©todos para `agregarContacto()`, `buscarContacto()` y `eliminarContacto()`.
*/

/*
1Ô∏è‚É£2Ô∏è‚É£ Ejercicio: Sistema de Inventario
--------------------------------------
üìå Objetivo: Aplicar POO para resolver un problema de gesti√≥n de inventario.
üîπ Tarea: Crear una clase `Inventario` con:
   - Una colecci√≥n de productos con `c√≥digo`, `nombre`, `precio`, `cantidad`.
   - M√©todos para `agregarProducto()`, `venderProducto()`, `reabastecerProducto()`.
   - Un m√©todo `generarInforme()` que muestre el estado actual del inventario.
*/

/*
1Ô∏è‚É£3Ô∏è‚É£ Ejercicio: Red Social Simplificada
--------------------------------------
üìå Objetivo: Modelar componentes b√°sicos de una red social.
üîπ Tarea: Crear clases para `Usuario`, `Publicaci√≥n` y `Comentario`:
   - `Usuario` con amigos, publicaciones y m√©todos para interactuar.
   - `Publicaci√≥n` con contenido, autor, likes y comentarios.
   - Implementar m√©todos para `publicar()`, `comentar()` y `darLike()`.
*/

/*
1Ô∏è‚É£4Ô∏è‚É£ Ejercicio: Sistema de Reservas de Hotel
--------------------------------------
üìå Objetivo: Dise√±ar un sistema de reservas aplicando encapsulamiento y asociaciones.
üîπ Tarea: Crear clases para `Hotel`, `Habitaci√≥n` y `Reserva`:
   - `Hotel` con colecci√≥n de habitaciones.
   - `Habitaci√≥n` con `n√∫mero`, `tipo`, `precio` y `disponibilidad`.
   - `Reserva` asociando hu√©spedes, habitaciones y fechas.
   - M√©todos para verificar disponibilidad y realizar reservas.
*/

/*
1Ô∏è‚É£5Ô∏è‚É£ Ejercicio: Simulador de Ecosistema
--------------------------------------
üìå Objetivo: Modelar interacciones complejas entre varios objetos.
üîπ Tarea: Crear un mini-ecosistema con:
   - Clases para `Ecosistema`, `Organismo`, `Planta`, `Herb√≠voro` y `Carn√≠voro`.
   - Implementar un ciclo de vida donde los organismos crecen, se alimentan y se reproducen.
   - Simular interacciones como la cadena alimenticia.
   - M√©todo `simularCiclo()` que avanza el ecosistema un paso en el tiempo.
*/


